---
attack_technique: T1008
display_name: Simulated Fallback Channel
atomic_tests:
  - name: Simulated Fallback from HTTPS to DNS
    auto_generated_guid: a1b2c3d4-e5f6-7890-abcd-1234567890ef
    description: |
      This test simulates a fallback communication behavior where a system attempts to reach a primary C2 server over HTTPS
      and then falls back to a DNS query upon repeated failure, mimicking Fallback Channel behavior.
    supported_platforms:
      - windows
    executor:
      name: powershell
      elevation_required: false
      command: |
        # Fallback Channel Simulation - See $env:TEMP\FallbackTest_Log.txt for output
        $primaryC2 = "https://primary-c2.example.com"
        $fallbackC2 = "dns://fallback-c2.example.com"
        $logPath = "$env:TEMP\FallbackTest_Log.txt"

        function Log-Message {
          param ($message)
          $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          $entry = "[$timestamp] $message"
          $entry | Out-File -FilePath $logPath -Append
          Write-Host $entry
        }

        function Test-C2Channel {
          param ($url)
          try {
            $response = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 5
            if ($response.StatusCode -eq 200) {
              Log-Message "Connected to C2: $url"
              return $true
            }
          } catch {
            Log-Message "Failed to connect to: $url"
            return $false
          }
        }

        Log-Message "=== Starting Primary C2 Channel Test ==="
        $maxAttempts = 3
        $success = $false

        for ($i = 1; $i -le $maxAttempts; $i++) {
          Log-Message "Attempt $i to reach Primary C2..."
          if (Test-C2Channel -url $primaryC2) {
            $success = $true
            break
          }
          Start-Sleep -Seconds (Get-Random -Minimum 3 -Maximum 7)
        }

        if (-not $success) {
          Log-Message "Primary C2 failed after $maxAttempts attempts. Initiating fallback..."
          try {
            $dnsResult = nslookup -type=txt fallback-c2.example.com
            Log-Message "DNS Fallback Response:`n$dnsResult"
          } catch {
            Log-Message "Fallback channel DNS query failed."
          }
        }

        Log-Message "=== Test Complete. Cleaning up artifacts ==="
    cleanup_command: |
      Remove-Item "$env:TEMP\FallbackTest_Log.txt" -Force -ErrorAction SilentlyContinue
    dependencies: []
    input_arguments: {}
    artifacts:
      - name: fallback-c2.log
        description: Log file storing the test's output
        path: $env:TEMP\FallbackTest_Log.txt
